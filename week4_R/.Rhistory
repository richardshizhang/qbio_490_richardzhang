print("This is a code block!")
getwd()
print("This is a code block!")
getwd()
# replace path with the path to your qbio_490_name directory
knitr::opts_knit$set(root.dir = normalizePath("/Users/rsz/Desktop/QBIO490/qbio_490_richardzhang/week4_R"))
## Create a new variable my_var to store anything you choose:
my_var <- "QBIO490"
print(my_var)
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c("ATTGC","ACCTG","TAATC")
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
factor
typeof(three_fav_colors)
## add code here!
name <- "Richard Zhang"
age <- 20
birthday <- "06/13/2004"
three_fav_colors <- c("blue","purple","red")
print(name,age,birthday,three_fav_colors)
print(name)
print(name, age)
## add code here!
name <- "Richard Zhang"
age <- 20
birthday <- "06/13/2004"
three_fav_colors <- c("blue","purple","red")
print(name)
print(age)
print(birthday)
print(three_fav_colors)
typeof(three_fav_colors)
three_fav_colors <- c("green","purple","red")
print(three_fav_colors)
typeof(three_fav_colors)
## add code here!
name <- "Richard Zhang"
age <- 20
birthday <- "06/13/2004"
three_fav_colors <- c("green","purple","red")
print(name)
print(age)
print(birthday)
print(three_fav_colors) #character?
typeof(three_fav_colors)
typeof(birthday)
typeof(name)
typeof(age)
typeof(three_fav_colors)
max_value <- max(1, 10, 100) ## storing to a variable does not automatically print
max_value
sum(list_of_numbers)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
sum(list_of_numbers)
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
sum(list_of_numbers)
min(list_of_numbers)
mean(list_of_numbers)
mode(list_of_numbers)
summary(list_of_numbers)
"QBIO" == "QBIO" ## is equal to
"USC" != "UCLA" ## is not equal to
10 > 9 ## greater than
1 < 2 ## less than
8 >= 3 ## greater than or equal to
4 <= 7 ## less than or equal to
100 %in% c(10, 100, 1000, 10000) ## is present in a vector/list
"cat" == "cat" & "fish" == "hamster" # prediction:
"cat" == "cat" & "dog" == "dog" # prediction:
"cat" == "cat" & "fish" == "hamster" # prediction:
1 < 2 | 3 < 1 # prediction:
1 < 2 | 3 < 5 # prediction:
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
# prediction:
if (1>2) {
print("fail")
} else if (1<2) {
print("Success!")
} else {
print("oops")
}
new_list <- c("starbucks", "elephant", 232, "magenta", -10)
if (7.5 %in% new_list) {
print("A")
if (!7.5 %in% new_list) {
print ("B")
}
} else if  (!(232 %in% new_list)) {
print("C")
} else if ("starbucks" %in% new_list &! 9 > 10) {
print("D")
if (100 < 1 | "elephant" %in% new_list) {
print("E")
}
else if ("magenta" %in% new_list) {
print("F")
}
} else {
print("G")
}
#prediction: DE
while (i < 10) {
print(i)
i = i + 2
}
i = 1
while (i < 10) {
print(i)
i = i + 2
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (!mean>10) {
x = x + 1
mean <- mean(my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (!mean>10) {
x = x + 1
mean <- mean(my_list)
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (!mean>10) {
x = x + 1
my_list <- c(1, 10, x)
mean <- mean(my_list)
}
print(mean)
list <- c(2, 4, 6, 8)
for (element in list) { # note that I can call "element" whatever I want, it like a temporary variable that stores the list's item
print (element * 2)
}
list <- c(1, 5, 20, 0)
# write loop here
for (i in list){
print(i^3)
}
# write loop here
for (i in -7:7){
print(i)
}
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
vector <- 1:10^6 # here's a huge vector (all numbers between 1 and 10^6)
loop_sum <- function(vector) { # here, I created a user-defined function that sums up the elements in "vector" using a loop
x=0
for (i in vector) {
x = x + i
}
return(x)
}
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
loop_sum(vector) == function_sum # tests that these are equal
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
install.packages("rbenchmark")
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
install.packages("rbenchmark")
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
vector <- 1:10^6 # here's a huge vector (all numbers between 1 and 10^6)
loop_sum <- function(vector) { # here, I created a user-defined function that sums up the elements in "vector" using a loop
x=0
for (i in vector) {
x = x + i
}
return(x)
}
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
loop_sum(vector) == function_sum # tests that these are equal
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
# write code here
help(is.na())
# write code here
help(is.na
# write code here
help(is.na)
# write code here
help(is.na)
args(is.na)
# write code here
help(is.na)
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
